/* Code section */
%{
#include <stdlib.h>
#include <stdio.h>

// Reference to the yylex function to quiet a compiler warning
// Reference to the line number generated by the scanner
int yylex();
extern int yylineno;

void yyerror(char const *s)
{
    fprintf(stderr, "Error: syntax on line %d: %s\n", yylineno, s);
    exit(1);
}

%}

/* The union directive defines the yylval union used for associating (a) terminals (tokens)
 * returned by flex with additional scanning data (such as identifier/constant values); and
 * optionally (b) non-terminals (variables in productions) with AST information if any.
 */
%union
{
    int intval;
    double floatval;
    char *strval;
    char runeval;
}

/* Token directives define the token types to be returned by the scanner (excluding character
 * tokens). Each token definition takes [optionally, a reference to the associated field in the
 * yylval union] and an identifier. Multiple tokens can eb defined per directive by using a list
 * of identifiers separated by spaces.
 */
%token                  TOK_AND
%token                  TOK_ANDEQ
%token                  TOK_ANDNOT
%token                  TOK_ANDNOTEQ
%token                  TOK_APPEND
%token                  TOK_ASSIGN
%token                  TOK_BREAK
%token                  TOK_CAP
%token                  TOK_CASE
%token                  TOK_CHAN
%token                  TOK_CONST
%token                  TOK_CONTINUE
%token                  TOK_DEC
%token                  TOK_DEFAULT
%token                  TOK_DEFER
%token                  TOK_DIVEQ
%token                  TOK_DOTS
%token                  TOK_ELSE
%token                  TOK_EQ
%token                  TOK_FALLTHROUGH
%token  <floatval>      TOK_FLOAT
%token                  TOK_FOR
%token                  TOK_FUNC
%token                  TOK_GEQ
%token                  TOK_GO
%token                  TOK_GOTO
%token                  TOK_GT
%token                  TOK_IDENT
%token                  TOK_IF
%token                  TOK_INC
%token  <intval>        TOK_INT
%token                  TOK_INTERFACE
%token                  TOK_LEN
%token                  TOK_LEQ
%token                  TOK_LT
%token                  TOK_LSHIFT
%token                  TOK_LSHIFTEQ
%token                  TOK_MAP
%token                  TOK_MINUSEQ
%token                  TOK_NEQ
%token                  TOK_OR
%token                  TOK_OREQ
%token                  TOK_PACKAGE
%token                  TOK_PLUSEQ
%token                  TOK_PRINT
%token                  TOK_PRINTLN
%token                  TOK_RANGE
%token                  TOK_REMEQ
%token                  TOK_RETURN
%token                  TOK_RSHIFT
%token                  TOK_RSHIFTEQ
%token  <runeval>       TOK_RUNE
%token                  TOK_SELECT
%token  <strval>        TOK_STR
%token                  TOK_STRUCT
%token                  TOK_SWITCH
%token                  TOK_TIMESEQ
%token                  TOK_TYPE
%token                  TOK_VAR
%token                  TOK_XOREQ

/* Precedence directives resolve grammar ambiguities by breaking ties between shift/reduce
 * operations. Tokens are grouped into precendence levels, with lower precedence coming first
 * and then higher precedence in later directives. Tokens specified in the same directive have
 * the same precedence. Ties at the same level are broken using either %left or %right, which
 * denote left-associative and right-associative respectively.
 */
%left TOK_OR 
%left TOK_AND 
%left TOK_EQ TOK_NEQ TOK_LT TOK_LEQ TOK_GT TOK_GEQ
%left '+'  '-'  '|'  '^'
%left '*' '/' '%' TOK_LSHIFT TOK_RSHIFT '&' TOK_ANDNOT 

%left UNARY

/* Start token (by default if this is missing it takes the first production */
%start program
/* Generate the yylloc structure used for storing line numbers with tokens */
%locations
/* Generate detailed error messages */
%error-verbose

/* The second section of a bison file contains the productions. Note that rules with the
 * same LHS may be joined together and separated with a pipe.
 */
%%
program: exp
       ;

exp : TOK_IDENT
    | TOK_INT 
    | TOK_FLOAT 
    | TOK_RUNE 
    | TOK_STR
    
    | exp '+' exp                      {}
    | exp '-' exp                      {}
    | exp '*' exp                      {}
    | exp '/' exp                      {}

    | exp TOK_AND exp                  {}
    | exp TOK_OR exp                   {}
    | exp TOK_EQ exp                   {}
    | exp TOK_NEQ exp                  {}
    | exp TOK_LT exp                   {}
    | exp TOK_LEQ exp                  {}
    | exp TOK_GT exp                   {}
    | exp TOK_GEQ exp                  {}
    
    | exp '|' exp                      {}
    | exp '^' exp                      {}
    | exp '%' exp                      {}
    | exp TOK_LSHIFT exp               {}
    | exp TOK_RSHIFT exp               {}
    | exp '&' exp                      {}
    | exp TOK_ANDNOT exp               {}

    | '-' exp           %prec UNARY    {}
    | '+' exp           %prec UNARY    {}


    | '!' exp         %prec UNARY      {} //boolean
    | '^' exp        %prec UNARY       {} //only for integers

    | '(' exp ')'                      {}
    ;
    ;
%%